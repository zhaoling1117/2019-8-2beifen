{
  "uid" : "1e928aee5f6f8d9c",
  "name" : "test_user_admin_register_1",
  "fullName" : "test_case.user_admin.test_user_register#test_user_admin_register_1",
  "historyId" : "dce81da3a703bc0099f573958a6a2c2f",
  "time" : {
    "start" : 1564113767922,
    "stop" : 1564113768029,
    "duration" : 107
  },
  "status" : "broken",
  "statusMessage" : "TypeError: 'NoneType' object is not subscriptable",
  "statusTrace" : "def test_user_admin_register_1():\n        #注册接口-全字段正常流\n    # 4、 config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api\n    # 5、 #url 网址，conf.GY_API_URL需要在config.conf.py文件中配置，相当于http请求默认值   '/admin/register' 请求地址\n        url = conf.GY_API_URL + '/admin/register'\n        #username 类似jmeter中的变量\n        username = \"xuepl124\"\n    # 6、请求数据，数据格式统一选用字典类型 注意json null 对应的是字典中的None\n        req = {\"email\":\"593971579@qq.com\",\"icon\":\"\",\"nickName\":\"xuepl\",\"note\":\"\",\"password\":\"123456\",\"username\":username}\n    # 7、post_request表示发送一个post请求，json= 表示发送的数据格式为json，如果数据格式为键值对，用data=\n        resp = request_tool.post_request(url, json=req)\n    # 8、 resp.json()获取响应正文中的数据，并把这些数据从字符串转成字典格式，如果想获取字符串格式的数据，resp.text\n        body = resp.json()\n    # 9、 判断响应码  resp.status_code获取响应状态码，200预期结果\n        assert_tool.assert_equal(resp.status_code, 200)\n    # 10、 自定义断言 body['data'][\"username\"]字典中获取某个key的值，username 预期结果，是一个变量\n>       assert_tool.assert_equal(body['data'][\"username\"], username)\nE       TypeError: 'NoneType' object is not subscriptable\n\ntest_case\\user_admin\\test_user_register.py:42: TypeError",
  "flaky" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "TypeError: 'NoneType' object is not subscriptable",
    "statusTrace" : "def test_user_admin_register_1():\n        #注册接口-全字段正常流\n    # 4、 config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api\n    # 5、 #url 网址，conf.GY_API_URL需要在config.conf.py文件中配置，相当于http请求默认值   '/admin/register' 请求地址\n        url = conf.GY_API_URL + '/admin/register'\n        #username 类似jmeter中的变量\n        username = \"xuepl124\"\n    # 6、请求数据，数据格式统一选用字典类型 注意json null 对应的是字典中的None\n        req = {\"email\":\"593971579@qq.com\",\"icon\":\"\",\"nickName\":\"xuepl\",\"note\":\"\",\"password\":\"123456\",\"username\":username}\n    # 7、post_request表示发送一个post请求，json= 表示发送的数据格式为json，如果数据格式为键值对，用data=\n        resp = request_tool.post_request(url, json=req)\n    # 8、 resp.json()获取响应正文中的数据，并把这些数据从字符串转成字典格式，如果想获取字符串格式的数据，resp.text\n        body = resp.json()\n    # 9、 判断响应码  resp.status_code获取响应状态码，200预期结果\n        assert_tool.assert_equal(resp.status_code, 200)\n    # 10、 自定义断言 body['data'][\"username\"]字典中获取某个key的值，username 预期结果，是一个变量\n>       assert_tool.assert_equal(body['data'][\"username\"], username)\nE       TypeError: 'NoneType' object is not subscriptable\n\ntest_case\\user_admin\\test_user_register.py:42: TypeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "5943c1c82ab3b0b7",
      "name" : "请求",
      "source" : "5943c1c82ab3b0b7.txt",
      "type" : "text/plain",
      "size" : 355
    }, {
      "uid" : "1e4fbd0e2f005d7d",
      "name" : "响应",
      "source" : "1e4fbd0e2f005d7d.txt",
      "type" : "text/plain",
      "size" : 416
    }, {
      "uid" : "b7f2a4753dee6377",
      "name" : "log",
      "source" : "b7f2a4753dee6377.txt",
      "type" : "text/plain",
      "size" : 1780
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test_case.user_admin"
  }, {
    "name" : "suite",
    "value" : "test_user_register"
  }, {
    "name" : "subSuite"
  }, {
    "name" : "host",
    "value" : "SKY-20190318DNT"
  }, {
    "name" : "thread",
    "value" : "5196-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.user_admin.test_user_register"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "1e928aee5f6f8d9c.json",
  "parameterValues" : [ ]
}